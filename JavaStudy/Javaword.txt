■ 開発
・ウォーターフォール開発
　最初の段階で全ての機能を決め、工程を分割して進める開発プロセス。
　変更・追加などは開発終了後でないと意見が通るか分からない。
・アジャイル開発－「アジャイル」とは「素早い」「機敏」の意味。
　開発期間が短く、短期の反復期間内で機能を追加していく開発プロセス。
　開発期間中ならいつでも変更・追加が可能。
・マイグレーション
　プログラムやデータ、OSなどの環境を移行、変換すること。
・デグレーション
　「デグレート」のことで、新しいバージョンの品質が前よりも悪くなったり、修正したはずの不具合などが再発すること。
・デプロイ－deploｙの意味は「配備する」
　作成したプログラムを実際の運用環境に配置・展開して「使える状態」にすること。
・コンフリクト
　複数のプログラムが同じタイミングで同じデータなどを使用しようとして競合している状態のこと。
・環境－environment
ITにおいての環境とは、「何か」をするために準備したPC、ソフトウェア、機材・・・などをまとめて呼んだもの。
・開発環境（ローカル）－development environment
　開発するための必要なものが揃った「場」のこと。一般的な開発の流れは「開発環境」→「検証環境」→「本番環境」。
・検証環境（ステージング）－testing environment
　テストを行うための疑似本番環境のこと。
・本番環境
　完成したシステムなどが実際に動作する環境のこと。
・設計書／仕様書
　設計書とはプログラム完成するまでの過程（レシピ）を書かれているもの。
　仕様書は完成図の説明が書かれているもの。
・要件定義
　システム開発にいける工程の一つで、クライアントの要望などをまとめたもの。
・基本設計書
　要件定義を踏まえてシステムの全体図などをまとめたもの。
・詳細設計書
　基本設計をもとに,実際にプログラムが作れるように詳細を考え、まとめたもの。
・テスト
　上流工程において練られた、本来あるべき状態と現状を比較すること。
・単体テスト（UT）-Unit Test（ユニット・テスト）
　システムの機能ごと（結合前に）にテストすること。
　Program Test（プログラム・テスト）やPart Test（パート・テスト）の「PT」と表現される場合もある。
・結合テスト（CT／IT）-Integration Test（インテグレーション・テスト）
　単体テストを終えた機能を結合させてテストすること。
　Joint Test（ジョイント・テスト）の「JT」と表現される場合もある。
・総合テスト（ST）-System Test（システム・テスト）
　システムが完成しているかどうか、全体的に確認するテストのこと。　
・エビデンス／証跡-evidence
　画面のコピーやログなど、システムの正しい動作や不具合などの証拠となるもののこと。
・データパッチ
　ソフトに変更を加えるための後付けのプログラムのことで、機能の追加や不具合の修正などが行われる。
・Access-Microsoft Access
　Microsoft社が作ったデータベースのソフト。
・マクロ
　操作手順などを記録して、その記録を実行できる機能のこと。
　Excelの機能として有名。
・VBA-Visual Basic
　Microsoft社が作った、Microsoft Office製品で動くプログラムを作るためのプログラミング言語。
・GAS（Google Apps Script）
　Googleが提供している、Javascrptで操作するためのスクリプト環境のこと。
　VBAのように、GASはGoogleが提供しているサービスを利用することができる。
◎スクリプト
プログラミング言語をコンピュータが分かる形にコンパイルすることを意識せずに済むプログラムのこと。
「書いて、すぐ動かせる」ように見えるだけであって実際はコンパイル作業は行われている。
javaScript、PHP、Perlなどはスクリプト言語である。
・API-Application Programming Interface（アプリケーション・プログラミング・インターフェイス）
　アプリケーションをプログラミングするための窓口であり、その連携の規約のこと。。
　APIを公開するということは、ソフトウェアにAPI（窓口）を取り付け、外部と連携がとれる状態にすることを意味する。
　開発者がAPIを利用すれば、同じ機能を開発する必要がないため、開発効率の向上が期待できる。
・WEB API
　インターネットを経由してやり取りする（HTTP／HTTPSベース）、その機能と窓口のことで、代表的な実装方法としてRESTとSOAPがある。
　WEB　APIは不特定多数の人に利用されることを前提にしている場合が多い。　
◎REST-Representational State Transfer
　WEBの設計思想のことで、「リソース」を扱うための考え方。
　パラメータを指定して特定のURLにアクセスするとXML(またはJSON)で応答される。
　セッションなどの状態管理は行わず、同じURLからは同じ結果が得られる(状態やセッションに依存しない)。
・REST API-RESTful APIとも呼ばれる
　上記RESTに従って行うAPI設計思想のこと。
・SOAP
　異なるコンピュータ上で動作するプログラム同士がネットワークを通じてメッセージを伝え合い、連携するための通信プロトコルの一つ。
　メッセージの記述にXMLを、データ伝送に主にHTTPを用いる。
・Ajax-Asynchronous（非同期） JavaScript ＋ XML
　JavaScriptの非同期通信を使用してXML形式のデータをサーバとやり取りする実装方式のこと。
◎非同期通信
　画面に遷移のない通信のこと。
　webプラウザから一部の情報をリクエストするので、
　それ以外の部分は変わらない。なので画面が白くなることがない。
　=>サーバーからレスポンスが返ってこなくても他の作業ができる。
◎同期通信
　webブラウザからサーバーにリクエストを通信し、レスポンスが戻ってくる。
　この時に、すべての情報を通信しているので、一瞬画面が白くなる。
　=>サーバーからレスポンスが返ってくるまでは他の作業はできない。
・XML-eXtensible Markup Language（エクステンシブル・マークアップ・ランゲージ）
　マークアップ言語の一つで、HPに使われているHTMLとは異なり、データのやり取りや設定ファイルの記述などに使われている。
・JSON-JavaScript Object Notation（ジャヴァスクリプト・オブジェクト・ノーテーション）、略してジェイソン
　JavaScriptと相性が良い、ファイルの書き方のルール。
・ステータスコード-HTTP status code
　WebブラウザからWebサーバに対して出されるHTTPリクエストの結果を表す3桁の数字。
　よく見る「404」がステータスコード。
・クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）
　追加の HTTP ヘッダーを使用して、異なるオリジンにあるリソースへのアクセス権を与えるようブラウザに指示するための仕組み。
　Webアプリケーションは、自分とは異なるオリジンにあるリソースをリクエストするとき、オリジン間 HTTP リクエストを実行する。
◎オリジン
　URL中のスキーム、ホスト、ポートの組み合わせのこと。
　http://example.comだと、スキーム：http/ホスト：example.com/ポート: 80（省略可能）。
・バリデーション-英：validation
　入力/書式/妥当性チェックのことで、入力フォームの作成時などに出てくる。
　例：名前の入力フォームにTELを入力するとエラー。←このチェックのこと。
・データ連携
　異なるyアプリケーションやシステムをまたいで「データ」を「資産」として共有、有効活用するための仕組み。
・Daemon-デーモン
　メモリ上で待機している常駐プログラムのUNIX系OSにおける呼び名。
　デーモンの名前には最後に「d」を付けることが慣習となっている。
・CRON
　UNIX系のOSに入っているプログラムのひとつで、指定した時間にプログラムを実行してくれるもの。
　指示する時は、「crontab」というコマンドを使う。
・バッチ
　英語のBatchが語源で、日本語では一束、一軍などの意味。
　バッチ処理とはどこかのタイミングでまとめて実施される処理のこと。
・ログ
　コンピュータが記録しているもののことで、ログには種類がる。。
・CSV-Comma Separated Values（カンマ・セパレーティド（分離する）・ヴァリューズ（値））
　項目間が「,（カンマ）」で区切られている書式（CSV形式）などのこと。
・TSV-Tab Separated Values（タブ・セパレーティド・ヴァリューズ）
　項目間が「タブ」で区切られている書式などのこと（TSV形式）。
・プルリクエスト（マージリクエスト）
　他者に対してGitHub上のリポジトリ内のブランチにプッシュした変更について知らせること。
　これにより、自身では気づかないバグや記述ミスの発見が期待される。 
　
■ チケット管理ツール
・asana
　Facebookの共同創業者のダスティン・モスコヴィッツと元Googleエンジニアのジャスティン・ローゼンシュタインが立ち上げたタスク管理ツール。
　タスク管理のレイアウトを選べることが特徴で、マルチデバイスにも対応。
・Backlog
　ヌーラボが提供しているSaaS（Software as a Service）型のプロジェクト管理ツール。
　大規模なソフトウェア開発から保守運用、デジタルマーケティングキャンペーンの管理、Webサイトの制作まで多岐にわたる。
・Jooto-読み方：ジョートー
　2014年にシンガポール在住の日本人が立ち上げたクラウド型のタスク管理ツール。
　ポストイットを貼ったり、剥がしたりする感覚でタスク管理をすることが特徴。
・Readmine
　オープンソースのタスク管理ツールでプラグインが充実している。
　SubversionやGitとも連携できる。
・Trello
　ふせんを貼ったりはがしたりする感覚で行う、タスク管理ツール。
　iPhoneやAndroidのアプリも提供されている。
■ バージョン管理
・集中型
　ソフトウェア1つにつき1つのリポジトリを使い、メンバーは中央リポジトリからソースを持ち出し編集し、直接反映させる。
　リポジトリが置かれたサーバに接続できない環境の場合、最新のソースコードを取得やファイル編集の反映ができない。
・分散型
　リポジトリを複数持つことができ、開発の形態や規模に合わせてソースコードの管理ができる。
　リモートリポジトリをサーバ上に置き、開発者それぞれがローカルにリポジトリを持つという構成。
　ローカルリポジトリを使って作業し、ある程度作業できたらリモートリポジトリに反映するといった使い方ができる。
　つまりリモートリポジトリにアクセスできない環境でも作業を進めることができる。
・Github-読み方：ギットハブ（ハブとは「中心」「中枢」の意味）
 Gitを利用した分散型のバージョン管理システムのWebサービス。
・Backlog
　ヌーラボが提供しているSaaS（Software as a Service）型のプロジェクト管理ツール。
　バージョン管理システムのGitやSubversionのリポジトリ機能を備えている。
・SourceTree
　Atlassian社が開発した、Gitの操作ができる無料のデスクトップアプリケーション。
　難しいコマンド入力をすることなく、簡単にGitの操作が行える。
・Tortoise SVN
　クライアント/サーバ型の集中型バージョン管理システム。
　Subversion のクライアントで、Windowsのシェルエクステンションとして機能する。
　専用のGUIを備えており、CUI の Subversion より、直感的で簡単に扱うことが出来る。
◎シェル
　Windowsにおける、受付のようなもの。
　入力を受付て、コンピュータの内部に伝えてくれる。
◎シェルエクステンション
　Windowsのシェルの機能を拡張するためのインターフェイス。
　主にエクスプローラの機能を拡張するために使用される。 
・Git Flow
　Vincent Driessen氏の「A successful Git branching model」を基にしたプラグインで、運用ルールなどをまとめたツール。
　マスター（master）とデベロップ（develop）という 2本の柱を軸に、3本の補助柱を設けてブランチの運用をスマートにする。
・master
　 Gitにおける、デフォルトのブランチの名前。メインのブランチでもある。
　リリース可能な完全品質を保証するブランチで、releaseブランチからのマージのみで更新される。
　masterブランチ上で直接作業したりコミットするのはNG。
・release
　リリース作業を行うためのブランチで、developブランチから派生させる。
　リリース作業が完了したらmasterブランチとdevelopブランチにマージする。
　masterブランチにマージする際のコミットではtagを打ち、マージされたら該当のreleaseブランチは削除する。
・develop
　開発の主軸になるブランチで、masterブランチから派生させる。
　developブランチ上で直接作業したりコミットするのはNG。
　developブランチからfeatureブランチやreleaseブランチを切る。
・feature
　機能追加および修正作業を行うためのブランチで、developブランチから派生させる。
　作業完了してレビューが通ったら、developブランチにマージする。
　マージされたら該当のfeatureブランチは削除する。
■ FW／ライブラリ-英：framework
・FW
　何かの枠組みのこと。
　ITにおいては、開発を楽に行えるように用意されたプログラムのひな型のこと。
・Spring Framework-略して「スプリング」と呼ばれることが多い。
  Javaの開発環境で使用できるオープンソースのフレームワーク。
　AOPとDIと呼ばれる概念で構築されていることが特徴。
◎AOI-Aspect Orientation Programming（訳：アスペクト指向プログラミング）
　システム内で行われる同じ処理（共通処理）を抽出して集約をするプログラミング手法。
◎DI-Dependency Injection（訳：依存性の注入）
　スプリングでオブジェクトを注入することで依存関係が解消され、一つ一つのプログラムを独立させやすくなる。
・Struts-正式名称：Apache Struts（読み方：アパッチ・ストラッツ）
　The Apache Software Fundationが2000年から開発しているオープンソースのソフトウェア。
　以前はデファクトスタンダードと呼ばれるほど普及していた。
・JSF（Java Server Faces）
　2004年に開発された、Webアプリケーションのユーザインタフェースを作成するためのアプリケーションフレームワーク。
・ライブラリ
　プログラミングに必要な部品を集めたファイルのこと。
・Bootstrap-読み方：ブートストラップ
　Web制作者の作業を楽にする目的で作られた、Webサイト構築用のCSSひな形セット。
　CSSフレームワークとも呼ばれる。
・Flyway
　データベースのスキーマに対してバージョン管理するツール。
　パッチが適用されているか確認したい時、、新しいデータベース環境の作成に便利。
◎スキーマ-英：schema
　何かの「構造」を意図した表現。
　それぞれが指し示すものは少し違うことがあるので注意。
・Jackson
　Javaで使えるJSONライブラリ。
　JSON形式の文字列をJavaのオブジェクトに直接マッピングしたり、JavaオブジェクトをJSON文字列に変換することもできる。
◎マッピング
　何かと何かを関連づけること。
・jQuery
　2006年にリリースされたJavaScriptライブラリ。
　ブラウザの違いを意識せずに済む/HTMLのDOM操作が簡単にできる/Ajax処理が簡単に記述できることが特徴。
◎DOM
　HTMLの部品のこと。
・Junit
　Javaで書かれたプログラムのテストを自動化するためのツール。
　テストデータの入力とテスト結果の確認を自動的に行ってくれるもの。
・Log4j
　Java プログラム用のログ API （ログ出力実装ライブラリ）で、主にデバッグ用のツールとして使われている。
・Lombok
　Java特有の冗長なコードを簡潔にしてくれるオープンソースのライブラリ。
　Eclipseの自動生成機能の代わりにアノテーションを使うことで冗長なコードを簡潔にしてくれる。
・ORM-英：Object-relational mapping
　データベースとオブジェクト指向プログラミング言語の間の非互換なデータを変換するプログラミング技法。
　インピーダンス・ミスマッチを解消してRDBのレコードを、オブジェクトとして直感的に扱えるようにする。
◎インピーダンス・ミスマッチ
　オブジェクト指向は「現実世界の物事に即したデータモデル」、
　関係データベースは「検索やCRUDなどの処理に最適化されたデータモデル」。
　このような設計思想の違いのこと。
■ 連絡ツール
・ChatWork
　ビジネスコミュニケーションに特化したチャットツール。
　タスク機能管理に優れている。
・Slack
　2013年8月にアメリカでリリースされたビジネスコミュニケーションに特化したチャットツール。
　パフォーマンスに優れていていつでもどこでも使いやすい。
・IP Messenger
　白水啓章氏が作った LAN 用メッセンジャーソフト。
　同じネットワーク内のメンバーを自動認識し、クライアント同士がリアルタイムに情報交換できる優れたソフトウェア。
■ Java
・Javadoc
　Javaのソースコードから「プログラムについて説明するドキュメント」を生成する仕組み。
　Javadoc用のコメントを記述すると、作ったプログラムに対するドキュメントをソースコードに埋め込んでくれる。
・アノテーション-英：Annotation ＝　注釈　の意。
　Javaを書くときに大切な情報をコメントできるもの。
　コーディングのやり方を統一したり、ルールを書いておくことでミスを避けることができる。
・メモリ管理
　Javaにおけるメモリ管理は通常、GC（ガベージコレクション）が行っている。
　メモリ領域にはいくつか種類がある。
・ヒープ
　OSやアプリケーションソフトが使用するメモリ領域の一種で、JVM上でユーザが作ったプログラムが利用するメモリ領域のこと。
　用途に関係なく自由に確保することができる。
・GC-ガベージコレクション
すでにどこからも参照されていないオブジェクトを自動的に特定して破棄し、その占有メモリを解放する機能のこと。
・GoF
　Gang of Four(ギャング・オブ・フォー)と呼ばれる四人組が提唱した、オブジェクト指向においてよく使える設計パターンのこと。
　全部で23種類ありますが、大きく下記の3つに分類される。
　「オブジェクトの生成に関するパターン」/「プログラムの構造に関するパターン」/「オブジェクトの振る舞いに関するパターン」
・デザインパターン
　一般に、デザインパターンというGoFを意味する。
　もっと幅広く、『よく出会う問題とそのスマートな解決策』という意味でも使われることがある。
■ その他
・オブジェクト指向
　クラスを定義し、このクラスを実体化したオブジェクトどうしの相互作用を表現していくこと。
　例：
・バッチ処理
　どこかのタイミングでまとめて実施される処理のこと。
・コンパイル-英：compile
　人間が分かる言葉で書いたプログラムのソースコードをコンピュータが分かる言葉に変換すること。
・カバレッジ-英：coverage
　カバーしている（した）範囲のことで、プログラムのテストの際によく使う。
・プラットホーム-英：platform
　何かを動かすための土台となる環境のこと。（システムが動く環境など）